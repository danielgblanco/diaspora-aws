AWSTemplateFormatVersion: '2010-09-09'
Description: 'Low-cost diaspora* pod infrastructure'
Parameters:
  PodInstanceType:
    Description: Pod EC2 Intance Type
    Type: String
    Default: t3a.small
    AllowedValues:
      - t3.micro
      - t3a.micro
      - t3.small
      - t3a.small
      - t3.medimum
      - t3a.medium
      - t3.large
      - t3a.large
      - t3.xlarge
      - t3a.xlarge
      - t3.2xlarge
      - t3a.2xlarge
      - m5.large
      - m5a.large
      - c5.large
      - c5a.large
    ConstraintDescription: must be a valid EC2 instance type.
  PodKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the pod
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  PodAMI:
    Description: AMI ID to use for pods
    Type: AWS::EC2::Image::Id
    ConstraintDescription: must be the name of an existing AMI.
  DbMasterUsername:
    NoEcho: 'true'
    Description: Username for PostgreSQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DbMasterPassword:
    NoEcho: 'true'
    Description: Password PostgreSQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  AssetsBucketName:
    Description: Name for the S3 bucket used for buckets
    Type: String

Resources:
  DiasporaVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: diaspora-low-cost-vpc

  DiasporaPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Sub '${AWS::Region}a'
      VpcId: !Ref DiasporaVpc
      Tags:
        - Key: Name
          Value: diaspora-low-cost-public

  DiasporaPrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.101.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      VpcId: !Ref DiasporaVpc
      Tags:
        - Key: Name
          Value: diaspora-low-cost-private-0
  DiasporaPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.102.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      VpcId: !Ref DiasporaVpc
      Tags:
        - Key: Name
          Value: diaspora-low-cost-private-1

  DiasporaInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: diaspora-low-cost-gateway
  DiasporaInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref DiasporaInternetGateway
      VpcId: !Ref DiasporaVpc

  DiasporaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DiasporaVpc
      Tags:
        - Key: Name
          Value: diaspora-low-cost-public-routes

  DiasporaPublicRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DiasporaInternetGateway
      RouteTableId: !Ref DiasporaPublicRouteTable
      Tags:
        - Key: Name
          Value: diaspora-low-cost-public-routes

  DiasporaPublicRouteTableSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DiasporaPublicRouteTable
      SubnetId: !Ref DiasporaPublicSubnet

  PodSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access from private and HTTP access from public
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '10.0.101.0/24'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'DiasporaVpc'

  PodAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        WaitOnResourceSignals: true
    Properties:
      LaunchConfigurationName: !Ref PodLaunchConfig
      MinSize: '1'
      MaxSize: '1'
      VPCZoneIdentifier:
        - !Ref DiasporaPublicSubnet

  PodLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Start services and send healthcheck notification
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.PodLaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource PodLaunchConfig --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      KeyName: !Ref PodKeyName
      ImageId: !Ref PodAMI
      SecurityGroups:
        - !Ref PodSecurityGroup
      InstanceType: !Ref PodInstanceType
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource PodLaunchConfig --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource PodAutoscalingGroup --region ${AWS::Region}

  AuroraPrivateDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      SubnetIds:
        - !Ref 'DiasporaPrivateSubnet0'
        - !Ref 'DiasporaPrivateSubnet1'
  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      DeletionProtection: true
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: 9.6.18
      MasterUsername: !Ref 'DbMasterUsername'
      MasterUserPassword: !Ref 'DbMasterPassword'
      Port: 5432
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 2
        SecondsUntilAutoPause: 300

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'BucketName'