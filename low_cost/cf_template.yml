AWSTemplateFormatVersion: '2010-09-09'
Description: Low-cost diaspora* pod infrastructure
Parameters:
  PodInstanceType:
    Description: Pod EC2 Intance Type
    Type: String
    Default: t3a.small
    AllowedValues:
      - t3.micro
      - t3a.micro
      - t3.small
      - t3a.small
      - t3.medimum
      - t3a.medium
      - t3.large
      - t3a.large
      - t3.xlarge
      - t3a.xlarge
      - t3.2xlarge
      - t3a.2xlarge
      - m5.large
      - m5a.large
      - c5.large
      - c5a.large
    ConstraintDescription: must be a valid EC2 instance type.
  PodKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the pod
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  PodAMI:
    Description: AMI ID to use for pods
    Type: AWS::EC2::Image::Id
    ConstraintDescription: must be the name of an existing AMI.
  AssetsBucketName:
    Description: Name for the S3 bucket used for buckets
    Type: String
  DatabaseUsernameKey:
    Description: Key for the database username parameter from SSM Parameter Store
    Type: AWS::SSM::Parameter::Name
    MinLength: '1'
  DatabasePasswordKey:
    Description: Key for the database password parameter from SSM Parameter Store
    Type: AWS::SSM::Parameter::Name
    MinLength: '1'
  DatabaseUsernameVersion:
    Description: Version for the database username parameter from SSM Parameter Store
    Type: String
    MinLength: '1'
    Default: '1'
  DatabasePasswordVersion:
    Description: Version for the database password parameter from SSM Parameter Store
    Type: String
    MinLength: '1'
    Default: '1'
  RailsEnvironment:
    Description: Environment to run on (e.g. production)
    Type: String
    Default: development
    AllowedValues :
      - development
      - production
  PodName:
    Description: Name of the pod
    Type: String
    MinLength: '1'
  EnableRegistration:
    Description: Whether to enable registration or to have invite only (e.g. true). Registrations need to be enabled
      the first time in order to be able to register an admin account
    Type: String
    MinLength: '1'
    Default: false
    AllowedValues:
      - false
      - true
  InvitationsOpen:
    Description: Wether to allow users to invite other or not (e.g. false)
    Type: String
    MinLength: '1'
    Default: false
    AllowedValues:
      - false
      - true
  AdminAccount:
    Description: Name of the admin account to use for contact details
    Type: String
    MinLength: '1'
  AdminEmail:
    Description: Email address for the admin to use for contact details
    Type: String
    MinLength: '1'
  HostedZoneId:
    Description: The ID of the Hosted Zone parent of the domain passed (e.g. if domain is www.example.com the hosted zone must be example.com)
    Type: String
    MinLength: '1'
  DomainName:
    Description: The fully qualified domain name (FQDN), such as www.example.com
    Type: String
    MinLength: '1'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Infrastructure
        Parameters:
          - PodInstanceType
          - PodKeyName
          - PodAMI
          - AssetsBucketName
          - DomainName
          - HostedZoneId
      - Label:
          default: Diaspora config
        Parameters:
          - RailsEnvironment
          - PodName
          - EnableRegistration
          - InvitationsOpen
          - AdminAccount
          - AdminEmail
      - Label:
          default: Database config
        Parameters:
          - DatabaseUsernameKey
          - DatabasePasswordKey
          - DatabaseUsernameVersion
          - DatabasePasswordVersion
    ParameterLabels:
      PodInstanceType:
        default: Pod Instance Type
      PodKeyName:
        default: Pod SSH Key Name
      PodAMI:
        default: Pod AMI
      AssetsBucketName:
        default: Assets S3 Bucket Name
      DatabaseUsernameKey:
        default: Database username key
      DatabasePasswordKey:
        default: Database password key
      DatabaseUsernameVersion:
        default: Database username version
      DatabasePasswordVersion:
        default: Database password version
      RailsEnvironment:
        default: configuration.server.rails_environment
      PodName:
        default: configuration.settings.pod_name
      EnableRegistration:
        default: configuration.settings.enable_registrations
      InvitationsOpen:
        default: configuration.settings.invitations.open
      AdminAccount:
        default: configuration.admins.account
      AdminEmail:
        default: configuration.admins.podmin_email
      DomainName:
        default: Domain Name
      HostedZoneId:
        default: Hosted Zone ID

Resources:
  DiasporaVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  DiasporaPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      VpcId: !Ref DiasporaVpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public'

  DiasporaPrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.101.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      VpcId: !Ref DiasporaVpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-0'

  DiasporaPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.102.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      VpcId: !Ref DiasporaVpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-1'

  DiasporaInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-gateway'

  DiasporaInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref DiasporaInternetGateway
      VpcId: !Ref DiasporaVpc

  DiasporaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DiasporaVpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-routes'

  DiasporaPublicRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DiasporaInternetGateway
      RouteTableId: !Ref DiasporaPublicRouteTable

  DiasporaPublicRouteTableSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DiasporaPublicRouteTable
      SubnetId: !Ref DiasporaPublicSubnet

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref DiasporaPublicRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref DiasporaVpc

  PodSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access within VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 10.0.0.0/16
      VpcId: !Ref DiasporaVpc

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable PostgreSQL access from within VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 10.0.0.0/16
      VpcId: !Ref DiasporaVpc

  PodRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  PodS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3AllowAll
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: '*'
            Resource:
              - !Sub 'arn:aws:s3:::${AssetsBucketName}'
              - !Sub 'arn:aws:s3:::${AssetsBucketName}/*'
      Roles:
        - !Ref PodRole

  PodSSMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SSMAllowGet
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 'ssm:GetParameter'
            Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DatabaseUsernameKey}'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DatabasePasswordKey}'
      Roles:
        - !Ref PodRole

  PodAssociateAddressPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AssociateAddress
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 'ec2:AssociateAddress'
            Resource: '*'
      Roles:
        - !Ref PodRole

  PodInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref PodRole

  PodInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    Metadata:
      Comment: Start services and send healthcheck notification
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/systemd/system/diaspora.target:
              content: !Sub |
                [Unit]
                Description=Diaspora social network
                Wants=redis-server.service
                After=redis-server.service

                [Install]
                WantedBy=multi-user.target
              owner: root
              group: root
            /etc/systemd/system/diaspora-web.service:
              content: !Sub |
                [Unit]
                Description=Diaspora social network (unicorn)
                PartOf=diaspora.target
                StopWhenUnneeded=true

                [Service]
                User=diaspora
                Environment=RAILS_ENV=${RailsEnvironment}
                WorkingDirectory=/home/diaspora/diaspora
                PIDFile=/home/diaspora/diaspora/tmp/pids/web.pid
                ExecStart=/bin/bash -lc "bin/bundle exec unicorn -c config/unicorn.rb -E ${RailsEnvironment}"
                ExecReload=/bin/kill -USR2 $MAINPID
                Restart=always

                [Install]
                WantedBy=diaspora.target
            /etc/systemd/system/diaspora-sidekiq.service:
              content: !Sub |
                [Unit]
                Description=Diaspora social network (sidekiq)
                PartOf=diaspora.target
                StopWhenUnneeded=true

                [Service]
                User=diaspora
                Environment=RAILS_ENV=${RailsEnvironment}
                WorkingDirectory=/home/diaspora/diaspora
                ExecStart=/bin/bash -lc "bin/bundle exec sidekiq"
                Restart=always

                [Install]
                WantedBy=diaspora.target
              owner: root
              group: root
            /home/diaspora/diaspora/config/nginx.global.values.yml:
              content: !Sub |
                http:
              owner: diaspora
              group: diaspora
            /home/diaspora/diaspora/config/nginx.server.values.yml:
              content: !Sub |
                server:
              owner: diaspora
              group: diaspora
            /home/diaspora/diaspora/config/database.values.yml:
              content: !Sub |
                database:
                  user: #DB_USER#          # Replaced using AWS SSM CLI at startup (resolve:ssm not supported here)
                  password: #DB_PASSWORD#  # Replaced using AWS SSM CLI at startup (resolve:ssm not supported here)
                  host: ${AuroraCluster.Endpoint.Address}
                  port: ${AuroraCluster.Endpoint.Port}
              owner: diaspora
              group: diaspora
            /home/diaspora/diaspora/config/diaspora.values.yml:
              content: !Sub |
                configuration:
                  environment:
                    url: https://${DomainName}
                  server:
                    rails_environment: ${RailsEnvironment}
                  settings:
                    pod_name: ${PodName}
                    enable_registration: ${EnableRegistration}
                    invitations:
                      open: ${InvitationsOpen}
                  admins:
                    account: ${AdminAccount}
                    podmin_email: ${AdminEmail}
              owner: diaspora
              group: diaspora
    Properties:
      IamInstanceProfile: !Ref PodInstanceProfile
      ImageId: !Ref PodAMI
      InstanceType: !Ref PodInstanceType
      KeyName: !Ref PodKeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: '0'
          GroupSet:
            - !GetAtt PodSecurityGroup.GroupId
          SubnetId: !Ref DiasporaPublicSubnet
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-pod'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -eo pipefail

          echo "Executing cfn-init"
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource PodInstance --region ${AWS::Region}

          echo "Seting up S3FS"
          echo "${AssetsBucketName} /home/diaspora/diaspora/public fuse.s3fs _netdev,allow_other,user,iam_role=${PodRole} 0 0" >> /etc/fstab
          mkdir /tmp/diaspora_public
          mv /home/diaspora/diaspora/public/* /tmp/diaspora_public
          echo "user_allow_other" > /etc/fuse.conf
          su diaspora -c "mount /home/diaspora/diaspora/public"
          mv /tmp/diaspora_public/* /home/diaspora/diaspora/public

          # Apply config
          echo "Rendering Mustache config templates"
          cd /home/diaspora/diaspora

          sed -i "s/#DB_USER#/$(aws --region ${AWS::Region} ssm get-parameter --name ${DatabaseUsernameKey}:${DatabaseUsernameVersion} --query 'Parameter.Value' --output text)/g" config/database.values.yml
          sed -i "s/#DB_PASSWORD#/$(aws --region ${AWS::Region} ssm get-parameter --name ${DatabasePasswordKey}:${DatabasePasswordVersion} --with-decryption --query 'Parameter.Value' --output text)/g" config/database.values.yml

          mustache config/diaspora.values.yml config/diaspora.yml.mustache > config/diaspora.yml
          mustache config/database.values.yml config/database.yml.mustache > config/database.yml
          chown diaspora:diaspora config/diaspora.yml
          chown diaspora:diaspora config/database.yml

          mustache config/nginx.global.values.yml config/nginx.global.mustache > /etc/nginx/nginx.conf
          mustache config/nginx.server.values.yml config/nginx.server.mustache > /etc/nginx/sites-available/default

          # Configure database
          echo "Configuring database"
          su diaspora -c "cd /home/diaspora && source .profile && cd diaspora && RAILS_ENV=${RailsEnvironment} bundle exec rake db:create db:migrate"

          # Precompile assets (download from S3 existing ones already)
          echo "Precompiling assets"
          su diaspora -c "aws --region eu-west-1 s3 sync s3://${AssetsBucketName}/assets /home/diaspora/diaspora/public/assets"
          su diaspora -c "cd /home/diaspora && source .profile && cd diaspora && RAILS_ENV=${RailsEnvironment} bin/rake assets:precompile"
          su diaspora -c "aws --region eu-west-1 s3 sync /home/diaspora/diaspora/public/assets s3://${AssetsBucketName}/assets"

          # Start diaspora
          echo "Starting *diaspora server"
          systemctl enable diaspora.target diaspora-sidekiq.service diaspora-web.service
          systemctl restart diaspora.target

          # Allow NGINX read access to diaspora assets and uploads
          usermod -a -G diaspora www-data
          chmod g+w /home/diaspora/diaspora/public/uploads

          echo "Restarting NGINX server"
          systemctl restart nginx.service

          echo "cfn-signal success!"
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource PodInstance --region ${AWS::Region}

  PodRecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 15 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '15'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions: [ !Sub "arn:aws:automate:${AWS::Region}:ec2:recover" ]
      Dimensions:
        - Name: InstanceId
          Value: !Ref PodInstance

  AuroraPrivateDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Subnet Group for Diaspora Aurora DB
      SubnetIds:
        - !Ref DiasporaPrivateSubnet0
        - !Ref DiasporaPrivateSubnet1

  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      DeletionProtection: false # TODO: enable
      DBSubnetGroupName: !Ref AuroraPrivateDbSubnetGroup
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: 10.12
      MasterUsername: !Sub '{{resolve:ssm:${DatabaseUsernameKey}:${DatabaseUsernameVersion}}}'
      MasterUserPassword: !Sub '{{resolve:ssm-secure:${DatabasePasswordKey}:${DatabasePasswordVersion}}}'
      Port: 5432
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 2
        SecondsUntilAutoPause: 300
      VpcSecurityGroupIds:
        - !Ref DbSecurityGroup

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AssetsBucketName
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - !Sub 'https://${DomainName}'

  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${AssetsBucket}/assets/*'
            Principal: '*'

  DiasporaCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Ref DomainName

  DiasporaRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: !Sub 'RecordSet for ${DomainName}'
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      ResourceRecords:
        - !GetAtt DiasporaApiDomainName.RegionalDomainName
      TTL: 300
      Type: CNAME

  DiasporaServiceNamespace:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Description: !Sub 'ServiceDiscover Namespace for ${DomainName}'
      Name: !Ref DomainName

  DiasporaService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: !Sub 'Service for ${DomainName}'
      Name: diaspora-pod
      NamespaceId: !Ref DiasporaServiceNamespace

  DiasporaServiceInstance:
    Type: AWS::ServiceDiscovery::Instance
    Properties:
      InstanceAttributes:
        AWS_INSTANCE_IPV4: !GetAtt PodInstance.PrivateIp
        AWS_INSTANCE_PORT: '80'
      InstanceId: !Ref PodInstance
      ServiceId: !Ref DiasporaService

  DiasporaApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref DomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref DiasporaCertificate
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  DiasporaApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: !Sub 'API Gateway for ${DomainName}'
      DisableExecuteApiEndpoint: true
      Name: !Ref DomainName
      ProtocolType: HTTP

  DiasporaProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DiasporaApiGateway
      RouteKey: ANY /{proxy+}
      Target: !Sub 'integrations/${DiasporaProxyIntegration}'

  DiasporaProxyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref DiasporaApiGateway
      ConnectionId: !Ref DiasporaApiVpcLink
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationType: HTTP_PROXY
      IntegrationUri: !GetAtt DiasporaService.Arn
      PayloadFormatVersion: 1.0
      RequestParameters: {
        "overwrite:header.host": !Sub "${DomainName}"
      }

  DiasporaProxyStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref DiasporaApiGateway
      AutoDeploy: true
      Description: !Sub 'API Stage for ${DomainName}'
      StageName: $default

  DiasporaApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn: DiasporaApiDomainName
    Properties:
      ApiId: !Ref DiasporaApiGateway
      DomainName: !Ref DomainName
      Stage: $default

  DiasporaApiVpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: !Sub '${AWS::StackName}-vpc-link'
      SubnetIds:
        - !Ref DiasporaPublicSubnet